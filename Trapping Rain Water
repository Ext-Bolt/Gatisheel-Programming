int trap(vector<int>& h) {
        int n = h.size();
        vector<int> l(n,0);
        vector<int> r(n,0);
        
        l[0] = h[0];
        for(int i = 1;i<n-1;i++)    {
            l[i] = max(l[i-1],h[i]);
        }
        
        r[n-1] = h[n-1];
        for(int i = n-2;i>=0;i--)   {
            r[i] = max(r[i+1],h[i]);
        }
        
        int sum = 0;
        for(int i = 0;i<n;i++)  {
            sum += max(0,min(l[i],r[i]) - h[i]);
        }
        return sum;
    }
    
int trap(vector<int>& h) {
        int n = h.size();
        int res = 0 ;
        int left_max = 0;
        int right_max = 0;
        int l = 0;
        int r = n - 1;
        
        while(l<=r) {
            if(h[l] <= h[r])    {
                if(h[l] >= left_max) left_max = h[l];
                else res += left_max - h[l];
                
                l++;
            }
            else    {
                if(h[r] >= right_max)    {
                    right_max = h[r];
                }
                else    {
                    res += right_max - h[r];
                }
                r--;
            }
        }
        return res;
    }    
