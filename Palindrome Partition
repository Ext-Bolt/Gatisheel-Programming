int static dp[501][501];

 bool isPalindrome(int i,int j,string str)   {
        if(i==j)    {
            return true;
        }
        if(i>j) {
            return true;
        }
        while(i<j)  {
            if(str[i]!=str[j])  {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    int solve(int i,int j,string str) {
         if(i>=j)    { return 0; }
         if(isPalindrome(i,j,str))  { return 0; }
        if(dp[i][j]!=-1)    { return dp[i][j] ; }
        int mn = INT_MAX;
        for(int k=i;k<j;k++)    {
            int left,right;
            if(dp[i][k] != -1)  {
                left = dp[i][k];
            }
            else    {
                left = solve(i,k,str);
            }
            if(dp[k+1][j] != -1)  {
                right = dp[k+1][j];
            }
            else    {
                right = solve(k+1,j,str);
            }
            int temp = left + right + 1;;
            if(temp<mn) {
                mn = temp;
            }
        }
        return dp[i][j] = mn;
    }
    
    int palindromicPartition(string str)
    {
        memset(dp,-1,sizeof(dp));
        int N = str.length();
        return solve(0,N-1,str);
    }
